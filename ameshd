#!/usr/bin/env gosh
;; -*- Mode: Scheme; -*-
;;
;; ameshd is a program that does polling Tokyo Amesh Server on every five
;; minutes and notify it if it is raining at the specified region.
;;
;; Copyright (c) 2011 Naohiro Nishikawa, All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;;  1. Redistributions of source code must retain the above copyright notice,
;;     this list of conditions and the following disclaimer.
;;  2. Redistributions in binary form must reproduce the above copyright
;;     notice, this list of conditions and the following disclaimer in the
;;     documentation and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER "AS IS" AND ANY EXPRESS OR
;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
;; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
;; EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
;; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(use srfi-19)
(use rfc.http)
(use gauche.parseopt)
(use gauche.uvector)
(use gauche.charconv)

;;
;; Configurable variables
;;
(define position-x 139.766865) ;; Tokyo station
(define position-y 35.681004)  ;; Tokyo station
(define radius 20000) ;; 20 km
(define ameshd-dir "/Users/you/.ameshd/")
(define growl-notify-enable #t)
(define growl-command "growlnotify")
(define growl-icon "") ;; not yet
(define growl-icon-level1 "") ;; not yet
(define growl-icon-level2 "") ;; not yet
(define growl-icon-level3 "") ;; not yet
(define growl-icon-level4 "") ;; not yet
(define growl-icon-level5 "") ;; not yet
(define growl-icon-level6 "") ;; not yet
(define growl-icon-level7 "") ;; not yet
(define growl-icon-level8 "") ;; not yet
(define browser-notify-enable #f)
(define browser-command "open")
(define mail-notify-enable #f)
(define mail-command "mail")
(define mail-subject "ameshd")
(define mail-to "you@mail")
(define mail-notify-time '(10 . 24))
(define notify-at-program-start #t)
(define notify-on-level-change-higher #f) ;; not yet
(define notify-on-level-change-lower #f) ;; not yet
(define notify-rainfall-threshold 5)

(define *ameshd-version* "0.2.0")
(define amesh-north 36.253133)
(define amesh-south 35.099687)
(define amesh-west 138.202515)
(define amesh-east 140.570068)
(define amesh-image-x-pixel 770)
(define amesh-image-y-pixel 480)
;; 6378150*cos(35/180*pi)*2*pi/360 -> 91159.161
(define xd-per-degree 91159.161)
;; 2*pi*6378150/360 -> 111263.283
(define yd-per-degree 111263.283)

(define amesh-xd-per-pixel
  (/ (* xd-per-degree (- amesh-east amesh-west)) amesh-image-x-pixel))
(define amesh-yd-per-pixel
  (/ (* yd-per-degree (- amesh-north amesh-south)) amesh-image-y-pixel))
(define position-pixel-x
  (round->exact (* (- position-x amesh-west)
		     (/ amesh-image-x-pixel (- amesh-east amesh-west)))))
(define position-pixel-y
  (round->exact (* (- amesh-north position-y)
		   (/ amesh-image-y-pixel (- amesh-north amesh-south)))))
(define radius-pixel-x (round->exact (/ radius amesh-xd-per-pixel)))
(define radius-pixel-y (round->exact (/ radius amesh-yd-per-pixel)))
(define amesh-server "tokyo-ame.jwa.or.jp")
(define amesh-image-path "/mesh/000/")

(define rgb-uvector
	(make-u8vector (* amesh-image-x-pixel amesh-image-y-pixel 3)))
(define rain-uvector
	(make-u8vector (* amesh-image-x-pixel amesh-image-y-pixel)))

(define (get-amesh-image file)
  (string=? (call-with-output-file file
	      (lambda (out)
		(http-get amesh-server
			  (string-append amesh-image-path (sys-basename file))
			  :sink out :flusher (lambda _ #t))))
	    "200"))

(define (convert-gif-to-rgb gif-file rgb-file)
  (sys-system (format "gif2rgb -1 -o ~a ~a" rgb-file gif-file)))

(define (read-rgb-to-uvec rgb-file uvec)
  (call-with-input-file rgb-file
      (lambda (in)
	(read-block! uvec in))))

(define (write-uvec-to-file uvec file)
  (call-with-output-file file
    (lambda (out)
      (write-block uvec out))))

(define (rgb-to-rain-level rgb)
  (cond ((= rgb #xccffff) 1)
	((= rgb #x6699ff) 2)
	((= rgb #x3333ff) 3)
	((= rgb #x00ff00) 4)
	((= rgb #xffff00) 5)
	((= rgb #xff9900) 6)
	((= rgb #xff00ff) 7)
	((= rgb #xff0000) 8)
	((= rgb #x000000) -1)
	(else 0)))

(define amesh-rain-level-word-ja
  '((0 . "無雨")
    (1 . "弱い雨")
    (2 . "並の雨")
    (3 . "やや強い雨")
    (4 . "強い雨")
    (5 . "やや激しい雨")
    (6 . "激しい雨")
    (7 . "非常に激しい雨")
    (8 . "猛烈な雨")))

(define message-start-rain-ja "半径~dkmで雨が降り出しました。~aです。")
(define message-stop-rain-ja "半径~dkmで雨が止みました。")
(define message-change-rain-higher-ja "半径~dkmで雨が強くなりました。~aです。")
(define message-change-rain-lower-ja "半径~dkmで雨が弱くなりました。~aです。")

(define (make-start-message r max)
  (format message-start-rain-ja
	  r (cdr (assq max amesh-rain-level-word-ja))))

(define (make-stop-message r)
  (format message-stop-rain-ja r))

(define (make-change-higher-message r max)
  (format message-change-rain-higher-ja
	  r (cdr (assq max amesh-rain-level-word-ja))))

(define (make-change-lower-message r max)
  (format message-change-rain-lower-ja
	  r (cdr (assq max amesh-rain-level-word-ja))))

(define (convert-rgb-to-rain-level rgb-uvec rain-uvec)
  (let ((size (uvector-size rain-uvec)))
    (let loop ((i 0))
      (when (< i size)
	    (let1 level (rgb-to-rain-level
			 (+ (ash (u8vector-ref rgb-uvec (* i 3)) 16)
			    (ash (u8vector-ref rgb-uvec (+ (* i 3) 1)) 8)
			    (u8vector-ref rgb-uvec (+ (* i 3) 2))))
		  (u8vector-set! rain-uvec i 
				 (if (and (< level 0) (> i amesh-image-x-pixel))
				     (- (u8vector-ref rain-uvec
						      (- i amesh-image-x-pixel 1)) 1)
				     level)))
	    (loop (+ i 1))))))

(define (rain-ref x y)
  (if (or (< x 0) (>= x amesh-image-x-pixel)
	  (< y 0) (>= y amesh-image-y-pixel))
      0
      (u8vector-ref rain-uvector (+ (* y amesh-image-x-pixel) x))))

(define (check-rain-circle x y r)
  (define (check-rain-vertical x yh yl max sum)
    (if (< yh yl)
	(let1 nmax (rain-ref x yh)
	      (if (> nmax max)
		  (check-rain-vertical x (+ yh 1) yl nmax (+ sum nmax))
		  (check-rain-vertical x (+ yh 1) yl max (+ sum nmax))))
	(values max sum)))
  (define (check-rain-circle1 cx y r x max sum)
    (if (< cx (+ x r))
	(let ((yd  (round->exact (sqrt (- (* r r)  (* (- cx x) (- cx x)))))))
	  (receive (nmax sum)
		   (check-rain-vertical cx (- y yd) (+ y yd) max sum)
		   (if (> nmax max)
		       (check-rain-circle1 (+ cx 1) y r x nmax sum)
		       (check-rain-circle1 (+ cx 1) y r x max sum))))
	(values max sum)))
  (check-rain-circle1 (- x r) y r x 0 0))

(define (make-basename date)
  (date->string date "~Y~m~d~H~M"))

(define (make-filename file suffix)
  (string-append ameshd-dir file suffix))

(define *debug* #f)

(define (debug-init)
  (print "Enable debug")
  (set! *debug* #t))

(define (log fmt . var)
  (when *debug* (apply format #t fmt var) (flush)))

(define (send-mail to subject message)
  (let1 tmp-file (string-append ameshd-dir "mail-tmp")
	(call-with-output-file
	    tmp-file (lambda (out) (display message out)))
	(sys-system (format "cat ~a|~a -s ~a ~a"
			    tmp-file
			    mail-command subject to))
	(sys-remove tmp-file)))

(define (send-notify event level)
  (let ((growl growl-notify-enable)
	(browser browser-notify-enable)
	(mail (and mail-notify-enable
		   (let1 hour (date-hour (current-date))
			 (and (<= (car mail-notify-time) hour)
			      (>= (cdr mail-notify-time) hour)))))
	(message ""))
    (cond ((eq? 'start event)
	   (set! message (make-start-message (/ radius 1000) level)))
	  ((eq? 'change-higher event)
	   (set! message (make-change-higher-message (/ radius 1000) level))
	   (set! browser #f)
	   (set! mail #f))
	  ((eq? 'change-lower event)
	   (set! message (make-change-lower-message (/ radius 1000) level))
	   (set! browser #f)
	   (set! mail #f))
	  ((eq? 'stop event)
	   (set! message (make-stop-message (/ radius 1000)))))
    (when growl
	  (sys-system (format "~a -t ameshd -m \"~a\"" growl-command message)))
    (when browser
	  (sys-system (format "~a ~a" browser-command
			      (string-append "http://" amesh-server))))
    (when mail 
	  (send-mail mail-to mail-subject 
		     (ces-convert message "UTF-8" "ISO2022JP")))
    (log "send-notify: ~a\n" message)))

(define (amesh-test gif-file)
  (let1 rgb-file (string-append (car (string-split gif-file #\.)) ".rgb")
	(convert-gif-to-rgb gif-file rgb-file)
	(read-rgb-to-uvec rgb-file rgb-uvector)
	(sys-remove rgb-file)
	(convert-rgb-to-rain-level rgb-uvector rain-uvector)
	(receive
	 (level sum) (check-rain-circle position-pixel-x
					position-pixel-y radius-pixel-x)
	 (format #t "level ~d rainfall ~d\n" level sum))))

(define (ameshd)
  (define (ameshd notify plevel)
    (let* ((ct (current-time))
	   (cd (time-utc->date ct (* 9 60 60))) ;; JST(+9)
	   (min (slot-ref cd 'minute)))
      (slot-set! cd 'minute (- min (modulo min 5)))
      (let* ((file (make-basename cd))
	     (gif-file (make-filename file ".gif"))
	     (rgb-file (make-filename file ".rgb")))
	(let loop1 ((wait 6)) ;; wait 60sec at most
	  (when (= wait 0)
		(print "Can't get a rain map.")
		(sys-remove gif-file) (exit 1))
	  (if (not (get-amesh-image gif-file))
	      (begin (sys-sleep 10) (loop1 (- wait 1)))))
	(log "Get ~a at ~a\n" gif-file (make-basename (time-utc->date ct)))
	(convert-gif-to-rgb gif-file rgb-file)
	(read-rgb-to-uvec rgb-file rgb-uvector)
	(unless *debug* (sys-remove gif-file))
	(unless *debug* (sys-remove rgb-file))
	(convert-rgb-to-rain-level rgb-uvector rain-uvector)
	(receive
	 (level sum) (check-rain-circle position-pixel-x
					position-pixel-y radius-pixel-x)
	 (when (< sum notify-rainfall-threshold) (set! level 0))
	 (log "level ~d to ~d sum ~d\n" plevel level sum)
	 (if (= plevel 0)
	     (when (and notify (< 0 level)) (send-notify 'start level))
	     (if (= 0 level)
		 (send-notify 'stop level)
		 (begin
		   (when (< plevel level) (send-notify 'change-higher level))
		   (when (> plevel level) (send-notify 'change-lower level)))))
	 (sys-sleep (* (- 5 (modulo min 5)) 60))
	 (ameshd #t level)))))
  (ameshd notify-at-program-start 0))

(define (usage name rv)
  (format #t "usage: ~a -[dhtV]\n" name) (exit rv))

(define (version)
  (format #t "ameshd version ~a\n" *ameshd-version*) (exit 0))

(define (main args)
  (let-args (cdr args)
	    ((version "V|version" => (cut version))
	     (debug "d|debug" => (cut debug-init))
	     (test-file "t|test=s")
	     (help "h|help" => (cut usage (car args) 0))
	     (else (opt . _) (print "Unknown option :" opt) (usage (car args) 1))
	     . args)
	    (when test-file (amesh-test test-file) (exit 0))
	    (ameshd)))
